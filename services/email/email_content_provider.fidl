// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module email_content_provider;

import "apps/modules/email/services/messages/message.fidl";

// These data structures are (for now) modeled to represent Gmail's data model.

struct Thread {
  string id;
  // The actual thread data is represented in JSON for convenience when
  // communicating it over a Link.
  //
  // Thread Schema:
  // {
  //   'id': <thread id>,
  //   'snippet': <short text describing the thread>,
  //   'historyId': <marker used in future Gmail fetches to get deltas>,
  //   'messages': [<message>]
  // }
  //
  // The message schema is more involved; for now, see
  // packages/models/lib/src/email/message.dart.
  // TODO(vardhan): Spec out the message format in JSON.
  string json_payload;
};

struct Label {
  string id;
  string name;
  // Label schema:
  //
  // {'id': <thread id>,
  //  'name': <name of the label.  e.g: INBOX>,
  //  'unread': <number of unread threads>,
  //  'type': <type of folder.>
  // }
  string json_payload;
};

struct User {
  string id;
  // User schema:
  //
  // {'id': <unique user id>,
  //  'email': <email address>,
  //  'unread': <full name>,
  //  'picture': <URL of their avatar>
  // }
  string json_payload;
};

struct Status {
  bool success;
  string? message;
};

[ServiceName="email_content_provider.EmailContentProvider"]
interface EmailContentProvider {
  Me() => (User user);

  // Get a list of Label objects.
  Labels() => (array<Label> labels);

  // Get a single Label by ID.
  GetLabel(string id) => (Label? label);

  // Get a list of Thread objects.
  Threads(string label_id, int64 max) => (array<Thread> threads);

  // Get a single Thread by ID.
  GetThread(string id) => (Thread? thread);

  // When new emails come in, a notification is sent on the given message queue,
  // and the given Story is focused.
  RegisterForUpdates(string story_id, string message_queue_token);

  // Create a draft with the provided initial content. The returned message
  // will have its draft ID filled out, and will have a new message ID.
  CreateDraft(email.Message message) => (email.Message message);

  // Get all the drafts for the current user.
  Drafts(int64 max) => (array<email.Message> drafts);

  // Get the draft message with the given draft ID.
  GetDraftMessage(string draft_id) => (email.Message message);

  // Update the draft with the provided content. The returned message will
  // have the same draft ID as the input, but a new message ID. (See
  // https://developers.google.com/gmail/api/guides/drafts.)
  UpdateDraft(email.Message message) => (email.Message updated_message);

  // Send the draft with the given draft ID.
  SendDraft(string draft_id) => (Status status);

  // Delete the draft with the given draft ID, immediately and permanently.
  DeleteDraft(string draft_id) => ();
};
